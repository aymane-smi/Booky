name: Application Testing

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.*'
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    strategy:
      matrix:
        go-version: [ 1.17.x, 1.18.x, 1.19.x ]
    runs-on: ubuntu-latest
    services:
      book_db:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_DB: book_go
          POSTGRES_PASSWORD: ${{ secrets.PG_PASS }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Lint with golangci-lint
        uses: golangci/golangci-lint-action@v2
      - name: Install Dependency
        run: go mod download
      - name: Run migrations
        run: |
                export PGPASSWORD=${{ secrets.PG_PASS }}
                psql -h localhost -U ${{ secrets.PG_USER }} -a -f book_go.sql book_go
      - name: Run Go Test with excluding controllers package
        run: go test $(go list ./... | grep -v /controllers)
  release:
      needs: test
      permissions:
        contents: write
      if: startsWith(github.ref, 'refs/tags/v')
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set RELEASE_VERSION ENV var
          run: echo "RELEASE_VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV
        - name: Install go with version 1.19
          uses: actions/setup-go@v2  
          with:
            go-version: 1.19.x
        - name: Build binary file
          run: go build -o booky
        - name: generate release notes
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
                  gh api \
                  --method POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  /repos/aymane-smi/booky/releases/generate-notes \
                  -f configuration_file_path='.github/release.yaml' \
                  -f commitish=${{ env.RELEASE_VERSION }} \
                  -f tag_name=${{ env.RELEASE_VERSION }} \
                  > tmp-release-notes.json
        - name: gzip the bins
          run: |
                  tar -czvf "booky_linux_amd64.tar.gz" -C "./" booky
                  tar -czvf "booky_linux_arm64.tar.gz" -C "./" booky
        - name: create release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
                  jq -r .body tmp-release-notes.json > tmp-release-notes.md
                  gh release create ${{ env.RELEASE_VERSION }} \
                    -t "$(jq -r .name tmp-release-notes.json)" \
                    -F tmp-release-notes.md \
                    "booky_linux_amd64.tar.gz#booky_linux_amd64" \
                    "booky_linux_arm64.tar.gz#booky_linux_arm64"
  image:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: set env
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV # refs/tags/v1.0.0 substring starting at 1.0.0
      - name: setup buildx
        uses: docker/setup-buildx-action@v1
      - name: login to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            aymane-smi/booky:${{ env.RELEASE_VERSION }}
            aymane-smi/booky:latest